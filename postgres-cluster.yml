#
# postgres cluster in kubernetes with max 8 replicas
#
# the master is always on ${host}-0
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-sonar-config
  labels:
    app: postgres-sonar
data:
  POSTGRES_DB: sonarDB
  POSTGRES_USER: sonarUser
  POSTGRES_PASSWORD: "123456"
---
#
# postgres master/slave configuration
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: master-slave-config
  labels:
    app: postgres-sonar
data:
  master-slave-config.sh: |-
    HOST=`hostname -s`
    ORD=${HOST##*-}
    HOST_TEMPLATE=${HOST%-*}
    case $ORD in
      0)
      echo "host    replication     all     all     md5" >> /var/lib/postgresql/data/pg_hba.conf
      echo "archive_mode = on"  >> /etc/postgresql/postgresql.conf
      echo "archive_mode = on"  >> /etc/postgresql/postgresql.conf
      echo "archive_command = '/bin/true'"  >> /etc/postgresql/postgresql.conf
      echo "archive_timeout = 0"  >> /etc/postgresql/postgresql.conf
      echo "max_wal_senders = 8"  >> /etc/postgresql/postgresql.conf
      echo "wal_keep_segments = 32"  >> /etc/postgresql/postgresql.conf
      echo "wal_level = hot_standby"  >> /etc/postgresql/postgresql.conf
      ;;
      *)
      # stop initial server to copy data
      pg_ctl -D /var/lib/postgresql/data/ -m fast -w stop
      rm -rf /var/lib/postgresql/data/*
      # add service name for DNS resolution
      PGPASSWORD=k8s-postgres-ha pg_basebackup -h ${HOST_TEMPLATE}-0.postgres-sonar-h -w -U replicator -p 5432 -D /var/lib/postgresql/data -Fp -Xs -P -R
      # start server to keep container's screep happy
      pg_ctl -D /var/lib/postgresql/data/ -w start
      ;;
    esac
  create-replication-role.sql: |-
    CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'k8s-postgres-ha';
---

#
# postgres service 
#
apiVersion: v1
kind: Service
metadata:
  name: postgres-sonar-h
spec:
  clusterIP: None
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres-sonar
---


#
# postgres containers
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-sonar
spec:
  selector:
    matchLabels:
      app: postgres-sonar
  replicas: 2
  serviceName: postgres-sonar-h
  template:
    metadata:
      labels:
        app: postgres-sonar
    spec:
      containers:
      - name: postgres-sonar
        image: postgres:11.4
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgresql
          containerPort: 5432
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        envFrom:
          - configMapRef:
              name: postgres-sonar-config
        resources:
          limits:
            cpu: 1000m
            memory: 2048Mi
          requests:
            cpu: 500m
            memory: 1024Mi
      volumes:
      - name: init-scripts
        configMap:
          name: master-slave-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteMany" ]
      resources:
        requests:
          storage: 1Gi
  
